
buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
plugins {
    id 'com.github.johnrengelman.shadow' version '4.0.4'
    id 'java'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = pluginVersion
group = pluginGroup
archivesBaseName = pluginName

def directory = project.hasProperty("args")? project.file(project.getProperty("args")) : project.file(jar.destinationDir)
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    //compile fileTree(dir: 'libraries', include: '*.jar')
    compile 'net.luckperms:api:5.1'

    //shadow "net.kyori:adventure-api:4.7.0"
    shadow 'org.spongepowered:configurate-hocon:4.0.0'
    //shadow ('net.dv8tion:JDA:4.2.0_247') {exclude module: 'opus-java'}
    shadow ('net.dv8tion:JDA:4.2.0_227') {
        exclude group: 'okhttp3', module: "okhttp"
        exclude module: 'opus-java'
    }
    shadow "com.squareup.okhttp3:okhttp:4.9.0"
    shadow group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'
    shadow group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'

    // Database connectors
    shadow 'com.zaxxer:HikariCP:2.6.3'
    shadow 'org.mariadb.jdbc:mariadb-java-client:2.0.3'
    shadow 'com.h2database:h2:1.4.196'

    shadow group: 'com.google.code.gson', name: 'gson', version: '2.3.1'

    minecraft 'net.minecraftforge:forge:1.16.5-36.0.44'
}
jar {
    archiveName  = "${archivesBaseName}-${version}.jar"
    destinationDir = directory
    manifest {
        attributes([
                "Specification-Title": pluginId,
                "Specification-Vendor": "dirtcraft",
                "Specification-Version": "1",
                "Implementation-Title": pluginName,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"dirtcraft",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar {
    configurations = [project.configurations.shadow]
    archiveName  = "${archivesBaseName}-${version}.jar"
    destinationDir = directory

    relocate 'com.fasterxml.jackson',         'net.dirtcraft.libs.fasterxml'
    relocate 'com.google',                    'net.dirtcraft.libs.google'
    relocate 'com.iwebpp',                    'net.dirtcraft.libs.iwebpp'
    relocate 'com.neovisionaries.ws',         'net.dirtcraft.libs.neovisionaries.ws'
    relocate 'com.typesafe',                  'net.dirtcraft.libs.typesafe'
    relocate 'com.zaxxer',                    'net.dirtcraft.libs.zaxxer'
    relocate 'org.slf4j',                     'net.dirtcraft.libs.slf4j'
    relocate 'org.apache.commons',            'net.dirtcraft.libs.apache.commons'
    relocate 'org.apache.http',               'net.dirtcraft.libs.apache.http'
    relocate 'org.json',                      'net.dirtcraft.libs.json'
    relocate 'org.spongepowered.configurate', 'net.dirtcraft.libs.configurate'
    relocate 'gnu.trove',                     'net.dirtcraft.libs.trove'
    relocate 'me.vankka',                     'net.dirtcraft.libs.vankka'
    relocate 'okhttp3',                       'net.dirtcraft.libs.okhttp3'
    relocate 'okio',                          'net.dirtcraft.libs.okio'
    relocate 'io.leangen.geantyref',          'net.dirtcraft.libs.geantyref'
    relocate 'net.dv8tion.jda',               'net.dirtcraft.libs.net.dv8tion.jda'
    relocate 'javax.annotation',              'net.dirtcraft.libs.javax.annotation'
    relocate 'io.leangen.geantyref',          'net.dirtcraft.libs.geantyref'
    relocate 'org.intellij',                  'net.dirtcraft.libs.intellij'
    relocate 'org.jetbrains',                 'net.dirtcraft.libs.jetbrains'
    relocate 'org.checkerframework',          'net.dirtcraft.libs.checkerframework'
    relocate 'org.mariadb',                   'net.dirtcraft.libs.mariadb'
    relocate 'org.h2',                        'net.dirtcraft.libs.h2'

    //relocate 'net.kyori',                     'net.dirtcraft.libs.net.kyori'
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'snapshot', version: '20201028-1.16.3'
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', pluginId, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

jar.finalizedBy('reobfJar')
build.dependsOn(shadowJar)
compileJava.options.encoding = 'UTF-8'

